-- Ajoutez d'autres triggers et contraintes selon les besoins...

-- Les 8 requêtes demandées (à sauvegarder dans des fichiers séparés)

-- requete1.sql
CREATE VIEW requete1 AS
SELECT DISTINCT u.nom, u.adresse, u.age, c.theme, c.dateDebut, c.dateFin, 
       cl.nomClub, cl.departement, cl.region
FROM Utilisateur u
JOIN Competiteur comp ON u.numUtilisateur = comp.numCompetiteur
JOIN ParticipeCompetiteur pc ON comp.numCompetiteur = pc.numCompetiteur
JOIN Concours c ON pc.numConcours = c.numConcours
JOIN Club cl ON u.numClub = cl.numClub
WHERE YEAR(c.dateDebut) = 2023;

-- requete2.sql
CREATE VIEW requete2 AS
SELECT d.numDessin, e.note, u.nom, c.theme
FROM Dessin d
JOIN Evaluation e ON d.numDessin = e.numDessin
JOIN Competiteur comp ON d.numCompetiteur = comp.numCompetiteur
JOIN Utilisateur u ON comp.numCompetiteur = u.numUtilisateur
JOIN Concours c ON d.numConcours = c.numConcours
WHERE YEAR(e.dateEvaluation) = 2022
ORDER BY e.note ASC;

-- requete3.sql
CREATE VIEW requete3 AS
SELECT c.numConcours, YEAR(c.dateDebut) as annee, c.theme,
       u.nom as nom_competiteur, d.numDessin, d.commentaire as commentaire_dessin,
       e.note, e.commentaire as commentaire_evaluation, u2.nom as nom_evaluateur
FROM Dessin d
JOIN Evaluation e ON d.numDessin = e.numDessin
JOIN Concours c ON d.numConcours = c.numConcours
JOIN Competiteur comp ON d.numCompetiteur = comp.numCompetiteur
JOIN Utilisateur u ON comp.numCompetiteur = u.numUtilisateur
JOIN Evaluateur eval ON e.numEvaluateur = eval.numEvaluateur
JOIN Utilisateur u2 ON eval.numEvaluateur = u2.numUtilisateur;

-- requete4.sql
CREATE VIEW requete4 AS
SELECT u.nom, u.prenom, u.age
FROM Utilisateur u
JOIN Competiteur c ON u.numUtilisateur = c.numCompetiteur
WHERE NOT EXISTS (
    SELECT * FROM Concours co
    WHERE NOT EXISTS (
        SELECT * FROM ParticipeCompetiteur pc
        WHERE pc.numCompetiteur = c.numCompetiteur
        AND pc.numConcours = co.numConcours
    )
)
ORDER BY u.age ASC;

-- requete5.sql
CREATE VIEW requete5 AS
WITH NotesParRegion AS (
    SELECT cl.region, AVG(e.note) as moyenne_notes
    FROM Evaluation e
    JOIN Dessin d ON e.numDessin = d.numDessin
    JOIN Competiteur c ON d.numCompetiteur = c.numCompetiteur
    JOIN Utilisateur u ON c.numCompetiteur = u.numUtilisateur
    JOIN Club cl ON u.numClub = cl.numClub
    GROUP BY cl.region
)
SELECT region, moyenne_notes
FROM NotesParRegion
WHERE moyenne_notes = (SELECT MAX(moyenne_notes) FROM NotesParRegion);


-- requete6.sql
SELECT u.nom, u.prenom, COUNT(e.numDessin) as nombre_evaluations,
       AVG(e.note) as moyenne_notes
FROM Evaluateur ev
JOIN Utilisateur u ON ev.numEvaluateur = u.numUtilisateur
LEFT JOIN Evaluation e ON ev.numEvaluateur = e.numEvaluateur
GROUP BY ev.numEvaluateur, u.nom, u.prenom;


-- Requête 7
SELECT c.nomClub, COUNT(pc.numConcours) as nombre_participations
FROM Club c
JOIN ParticipeClub pc ON c.numClub = pc.numClub
GROUP BY c.numClub, c.nomClub
ORDER BY nombre_participations DESC
LIMIT 3;


-- Requête 8
SELECT saison,
       COUNT(DISTINCT c.numConcours) as nombre_concours,
       COUNT(DISTINCT d.numDessin) as nombre_dessins,
       AVG(e.note) as moyenne_notes
FROM Concours c
LEFT JOIN Dessin d ON c.numConcours = d.numConcours
LEFT JOIN Evaluation e ON d.numDessin = e.numDessin
GROUP BY saison;
